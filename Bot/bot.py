import logging
import telebot
import os
import platform
import datetime
from config import BOT_TOKEN, RESUME, PORTFOLIO_URL, PORTFOLIO_WEB_APP_URL, ADMIN_ID

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(BOT_TOKEN)

RESUME_PDF_PATH = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'resume_LaTeX', 'resume.pdf')

def get_main_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–æ—Ç–∞"""
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("–£—Å–ª—É–≥–∏", "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")
    markup.row("–†–µ–∑—é–º–µ", "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ")
    return markup

def get_portfolio_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton(
        text="–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        url=PORTFOLIO_WEB_APP_URL
    ))
    return markup

def get_contact_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"""
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton(
        text="Telegram",
        url="https://t.me/ananasDDA"
    ))
    markup.add(telebot.types.InlineKeyboardButton(
        text="GitHub",
        url="https://github.com/ananasDDA"
    ))
    return markup

@bot.message_handler(commands=['start'])
def start_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_name = message.from_user.first_name
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ—Ç username"

    if ADMIN_ID:
        try:
            current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            admin_message = (
                f"üîî <b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞!</b>\n\n"
                f"üë§ <b>–ò–º—è:</b> {user_name}\n"
                f"üÜî <b>ID:</b> {user_id}\n"
                f"üìù <b>Username:</b> @{username}\n"
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> {current_time}"
            )

            bot.send_message(
                int(ADMIN_ID),
                admin_message,
                parse_mode="HTML"
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}, ID: {user_id})")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")

    greeting = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n"
        f"–Ø {RESUME['name']}, {RESUME['position']}.\n"
        f"{RESUME['specialization']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ:"
    )

    bot.send_message(
        message.chat.id,
        greeting,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

@bot.message_handler(content_types=['text'])
def text_message_handler(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = message.text

    if text == "–£—Å–ª—É–≥–∏":
        services_text = "–ú–æ–∏ —É—Å–ª—É–≥–∏:\n\n" + "\n".join([f"‚Ä¢ {service}" for service in RESUME['services']])
        bot.send_message(message.chat.id, services_text, reply_markup=get_main_keyboard())

    elif text == "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã":
        experience_text = "–ú–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:\n\n"

        for job in RESUME['experience']:
            experience_text += f"<b>üìå {job['position']}</b> –≤ <b>{job['company']}</b>\n"
            experience_text += f"<i>‚è±Ô∏è {job['period']}</i>\n\n"

            description_points = job['description'].split('. ')
            for point in description_points:
                if point.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É–Ω–∫—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                    experience_text += f"‚Ä¢ {point.strip()}.\n"

            experience_text += "\n"

        bot.send_message(
            message.chat.id,
            experience_text,
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )

    elif text == "–†–µ–∑—é–º–µ":
        bot.send_message(
            message.chat.id,
            "–û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞–º –º–æ—ë —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF...",
            reply_markup=get_main_keyboard()
        )

        if os.path.exists(RESUME_PDF_PATH):
            with open(RESUME_PDF_PATH, 'rb') as resume_file:
                bot.send_document(
                    message.chat.id,
                    resume_file,
                    caption=f"–†–µ–∑—é–º–µ {RESUME['name']} - {RESUME['position']}"
                )

            bot.send_message(
                message.chat.id,
                "–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:",
                reply_markup=get_contact_keyboard()
            )
        else:
            logger.error(f"PDF-—Ñ–∞–π–ª —Ä–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {RESUME_PDF_PATH}")

            skills_text = ", ".join(RESUME['skills'])

            resume_text = (
                f"<b>{RESUME['name']} - {RESUME['position']}</b>\n"
                f"{RESUME['specialization']}\n\n"
                f"<b>–ù–∞–≤—ã–∫–∏:</b>\n{skills_text}\n\n"
                f"<b>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</b>\n"
            )

            for job in RESUME['experience']:
                resume_text += f"‚Ä¢ <b>{job['position']}</b> –≤ {job['company']} ({job['period']})\n"

            resume_text += "\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:"

            bot.send_message(
                message.chat.id,
                resume_text,
                parse_mode="HTML",
                reply_markup=get_main_keyboard()
            )

            bot.send_message(
                message.chat.id,
                "–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:",
                reply_markup=get_contact_keyboard()
            )

    elif text == "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ":
        portfolio_message = (
            "–ú–æ—ë –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
            f"<a href='{PORTFOLIO_URL}'>–û—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ</a>\n\n"
            "–ò–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
        )

        bot.send_message(
            message.chat.id,
            portfolio_message,
            parse_mode="HTML",
            disable_web_page_preview=False,
            reply_markup=get_portfolio_keyboard()
        )

    else:
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ:",
            reply_markup=get_main_keyboard()
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

        if ADMIN_ID:
            try:
                system_info = platform.uname()
                current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

                startup_message = (
                    f"ü§ñ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
                    f"‚è∞ <b>–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:</b> {current_time}\n"
                    f"üíª <b>–°–∏—Å—Ç–µ–º–∞:</b> {system_info.system} {system_info.release}\n"
                    f"üñ•Ô∏è <b>–•–æ—Å—Ç:</b> {system_info.node}\n"
                    f"üîÑ <b>–í–µ—Ä—Å–∏—è Python:</b> {platform.python_version()}\n\n"
                    f"–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
                )

                bot.send_message(
                    int(ADMIN_ID),
                    startup_message,
                    parse_mode="HTML"
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (ID: {ADMIN_ID})")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")